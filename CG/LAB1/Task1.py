import numpy as np
from PIL import Image

def save_image(img: np.ndarray, filename: str) -> None:
    """
    Сохраняет numpy-массив с изображением в файл с использованием PIL.

    Поддерживает все форматы, доступные в библиотеке Pillow (PNG, JPEG и др.).
    Тип файла определяется по расширению указанного имени файла.

    Args:
        image (np.ndarray): Изображение в виде numpy-массива. Ожидается
            двумерный массив (grayscale) или трехмерный (RGB/RGBA) с dtype=np.uint8.
        file_name (str): Имя целевого файла, включая расширение.

    Example:
        >>> img = np.zeros((100, 100), dtype=np.uint8)
        >>> save_image(img, "example.png")
    """

    img_pil = Image.fromarray(img) # Генерация изображения из массива
    img_pil.save(filename) # Сохранение изображения с указанным именем

# Task 1.1
def create_black_image(H: int, W: int) -> None:
    """
    Создает и сохраняет черное 8-битное grayscale изображение заданных размеров.

    Результат сохраняется в файл "example.png" в текущей директории. Если файл с таким
    именем уже существует, он будет перезаписан.

    Args:
        H (int): Высота изображения в пикселях (положительное целое число).
        W (int): Ширина изображения в пикселях (положительное целое число).

    Example:
        >>> create_black_image(100, 200)  # Создает изображение 200x100 пикселей
    """

    img = np.zeros((H, W), dtype=np.uint8) # Нулевая матрица размера H*W

    save_image(img, "bi.png")

# Task 1.2
def create_white_image(H: int, W: int) -> None:
    """
    Создает и сохраняет белое 8-битное grayscale изображение заданных размеров.

    Результат сохраняется в файл "example.png" в текущей директории. Если файл с таким
    именем уже существует, он будет перезаписан.

    Args:
        H (int): Высота изображения в пикселях (положительное целое число).
        W (int): Ширина изображения в пикселях (положительное целое число).

    Example:
        >>> create_black_image(100, 200)  # Создает изображение 200x100 пикселей
    """

    img = np.full((H, W), 255, dtype=np.uint8) # Матрица со значениями 255 размера H*W

    save_image(img, "wi.png")

# Task 1.3
def create_red_image(H: int, W: int) -> None:
    """
    Создает и сохраняет изображение в формате RGB, где все пиксели имеют цвет (255, 0, 0) (красный)

    Результат сохраняется в файл "example.png" в текущей директории. Если файл с таким
    именем уже существует, он будет перезаписан.

    Args:
        H (int): Высота генерируемого изображения в пикселях. Должна быть положительным целым числом.
        W (int): Ширина генерируемого изображения в пикселях. Должна быть положительным целым числом.

    Example:
        >>> create_red_image(300, 400) # Создает красное изображение размером 300x400 пикселей и сохраняет его
    """

    img = np.full((H, W, 3), (255, 0 , 0), dtype=np.uint8) # Матрица со значениями (255, 0, 0) размера H*W*3

    save_image(img, "ri.png")

#Task 1.4
def create_grad_image(H: int, W: int) -> None:
    """
    Создает и сохраняет градиентное изображение в формате RGB, где цвет пикселя 
    определяется как (x + y) % 256 (x, y - координаты пикселя)

    Результат сохраняется в файл "example.png" в текущей директории. Если файл с таким
    именем уже существует, он будет перезаписан.

    Args:
        H (int): Высота генерируемого изображения в пикселях. Должна быть положительным целым числом.
        W (int): Ширина генерируемого изображения в пикселях. Должна быть положительным целым числом.

    Example:
        >>> create_grad_image(300, 400) # Создает красное изображение размером 300x400 пикселей и сохраняет его
    """

    img = np.zeros((H, W, 3), dtype=np.uint8)

    # Заполнение матрицы
    for y in range (H):
        for x in range (W):
            val = (x + y) % 256 # Расчет цвета
            img[y, x] = (val, val, val)
    
    save_image(img, "gi.png")

if __name__ == '__main__':
    create_black_image(100, 100)
    create_white_image(100, 100)
    create_red_image(100, 100)
    create_grad_image(100, 100)